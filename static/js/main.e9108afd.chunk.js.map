{"version":3,"sources":["Stores/BusinessStore.ts","Stores/ReviewsStore.ts","Stores/Stores.ts","Components/Search/GridItem.tsx","Components/Search/SearchPage.tsx","Components/Details/Details.tsx","Components/Details/Reviews.tsx","Components/Details/Gallery.tsx","Components/Details/DetailsPage.tsx","Components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["BusinessStore","stores","this","action","query","a","setIsLoading","api","get","searchResponse","data","body","businesses","console","log","runInAction","setError","toString","id","businessResponse","ReviewsStore","getReviews","reviewsResponse","reviews","rootStore","businessStore","reviewsStore","axios","create","observable","loading","isLoading","msg","isError","errorMessage","StyledCard","styled","Card","GridItem","b","history","useHistory","Grid","item","key","CardActionArea","onClick","push","image_url","CardMedia","image","title","name","style","height","width","CardContent","Typography","gutterBottom","variant","component","color","price","display_phone","Rating","defaultValue","rating","precision","readOnly","review_count","StyledGrid","SearchPage","observer","useState","setBusinesses","URLSearchParams","useLocation","search","inputValue","setInputValue","error","useEffect","searchBusinesses","isInputValid","val","test","TextField","marginTop","label","onBlur","onChange","e","currentTarget","value","onKeyPress","InputProps","endAdornment","InputAdornment","position","helperText","container","map","length","Details","business","List","dense","disablePadding","ListItem","ListItemText","primary","secondary","size","location","display_address","join","categories","c","Reviews","useRouteMatch","params","setReviews","spacing","r","maxWidth","CardHeader","avatar","Avatar","src","user","alt","subheader","time_created","text","StyledImage","img","Gallery","photos","p","DetailsPage","setBusiness","getBusinessDetails","align","StyledToolbar","Toolbar","StyledLogo","div","App","className","AppBar","Container","path","exact","Backdrop","open","zIndex","CircularProgress","Snackbar","autoHideDuration","onClose","clearError","Alert","severity","Boolean","window","hostname","match","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e9108afd.chunk.js","sourcesContent":["import { runInAction, action } from 'mobx'\r\n\r\nimport { Stores } from './Stores'\r\n\r\ntype BusinessSearchResponse = {\r\n  body: {\r\n    businesses: Business[]\r\n  }\r\n}\r\ntype BusinessGetResponse = {\r\n  body: BusinessDetails\r\n}\r\n\r\nexport type Business = {\r\n  id: string\r\n  name: string\r\n  image_url: string\r\n  price: string\r\n  display_phone: string\r\n  rating: number\r\n  review_count: number\r\n}\r\n\r\nexport type BusinessDetails = Business & {\r\n  photos: string[]\r\n  location: { display_address: string[] }\r\n  categories: { title: string }[]\r\n}\r\n\r\nexport class BusinessStore {\r\n  private stores: Stores\r\n  public constructor(stores: Stores) {\r\n    this.stores = stores\r\n  }\r\n\r\n  @action searchBusinesses = async (query: string): Promise<Business[]> => {\r\n    this.stores.setIsLoading(true)\r\n    try {\r\n      const searchResponse = await this.stores.api.get<BusinessSearchResponse>(\r\n        `https://cz35iek.builtwithdark.com/api.yelp.com/v3/businesses/search?term=${query}`\r\n      )\r\n      return searchResponse.data.body.businesses\r\n    } catch (err) {\r\n      console.log(err)\r\n      runInAction(() => {\r\n        this.stores.setError(err.toString())\r\n      })\r\n      throw err\r\n    } finally {\r\n      runInAction(() => {\r\n        this.stores.setIsLoading(false)\r\n      })\r\n    }\r\n  }\r\n\r\n  @action getBusinessDetails = async (id: string): Promise<BusinessDetails> => {\r\n    this.stores.setIsLoading(true)\r\n    try {\r\n      const businessResponse = await this.stores.api.get<BusinessGetResponse>(\r\n        `https://cz35iek.builtwithdark.com/api.yelp.com/v3/businesses/${id}`\r\n      )\r\n      return businessResponse.data.body\r\n    } catch (err) {\r\n      console.log(err)\r\n      runInAction(() => {\r\n        this.stores.setError(err.toString())\r\n      })\r\n      throw err\r\n    } finally {\r\n      runInAction(() => {\r\n        this.stores.setIsLoading(false)\r\n      })\r\n    }\r\n  }\r\n}\r\n","import { runInAction } from 'mobx'\r\nimport { Stores } from './Stores'\r\n\r\ntype GetReviewsResponse = {\r\n  body: {\r\n    reviews: Review[]\r\n  }\r\n}\r\n\r\nexport type Review = {\r\n  id: string\r\n  rating: number\r\n  text: string\r\n  time_created: Date\r\n  user: {\r\n    id: string\r\n    image_url: string\r\n    name: string\r\n  }\r\n}\r\n\r\nexport class ReviewsStore {\r\n  private stores: Stores\r\n  public constructor(stores: Stores) {\r\n    this.stores = stores\r\n  }\r\n  getReviews = async (id: string) => {\r\n    this.stores.setIsLoading(true)\r\n    try {\r\n      const reviewsResponse = await this.stores.api.get<GetReviewsResponse>(\r\n        `https://cz35iek.builtwithdark.com/api.yelp.com/v3/businesses/${id}/reviews`\r\n      )\r\n      return reviewsResponse.data.body.reviews\r\n    } catch (err) {\r\n      console.log(err)\r\n      runInAction(() => {\r\n        this.stores.setError(err.toString())\r\n      })\r\n      throw err\r\n    } finally {\r\n      runInAction(() => {\r\n        this.stores.setIsLoading(false)\r\n      })\r\n    }\r\n  }\r\n}\r\n","import { BusinessStore } from './BusinessStore'\r\nimport { ReviewsStore } from './ReviewsStore'\r\nimport axios, { AxiosInstance } from 'axios'\r\nimport { observable, action } from 'mobx'\r\n\r\nexport class Stores {\r\n  @observable isLoading: boolean = false\r\n  @observable isError: boolean = false\r\n  @observable errorMessage: string = ''\r\n  api: AxiosInstance\r\n  businessStore: BusinessStore\r\n  reviewsStore: ReviewsStore\r\n\r\n  constructor() {\r\n    this.businessStore = new BusinessStore(this)\r\n    this.reviewsStore = new ReviewsStore(this)\r\n    this.api = axios.create()\r\n  }\r\n  @action setIsLoading = (loading: boolean) => {\r\n    this.isLoading = loading\r\n  }\r\n  @action setError = (msg: string) => {\r\n    this.isError = true\r\n    this.errorMessage = msg\r\n  }\r\n\r\n  @action clearError = () => {\r\n    this.isError = false\r\n    this.errorMessage = ''\r\n  }\r\n}\r\n\r\nexport const rootStore = new Stores()\r\n","import { Business } from '../../Stores/BusinessStore'\r\nimport { Grid, CardActionArea, CardMedia, CardContent, Typography, Card } from '@material-ui/core'\r\nimport React from 'react'\r\nimport Rating from '@material-ui/lab/Rating'\r\nimport styled from 'styled-components'\r\nimport PhotoIcon from '@material-ui/icons/Photo'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nexport const StyledCard = styled(Card)`\r\n  min-height: 282px;\r\n  width: 330px;\r\n  margin: 0 0px 10px 0;\r\n  text-align: center;\r\n`\r\nexport const GridItem = (b: Business) => {\r\n  const history = useHistory()\r\n  return (\r\n    <Grid item key={b.id}>\r\n      <StyledCard>\r\n        <CardActionArea onClick={() => history.push(`/business/${b.id}`)}>\r\n          {b.image_url ? (\r\n            <CardMedia image={b.image_url} title={b.name} style={{ height: 140 }} />\r\n          ) : (\r\n            <PhotoIcon style={{ width: '140px', height: '100%' }} />\r\n          )}\r\n          <CardContent>\r\n            <Typography gutterBottom variant='h5' component='h2'>\r\n              {b.name}\r\n            </Typography>\r\n            <Typography variant='body2' color='textSecondary' component='p'>\r\n              {b.price && `price:${b.price} `}\r\n              {b.display_phone && `phone:${b.display_phone}`}\r\n            </Typography>\r\n            <Rating defaultValue={b.rating} precision={0.5} readOnly></Rating>\r\n            {b.review_count > 0 && (\r\n              <Typography variant='body2' color='textSecondary' component='p'>\r\n                {b.review_count} {b.review_count === 1 ? 'review' : 'reviews'}\r\n              </Typography>\r\n            )}\r\n          </CardContent>\r\n        </CardActionArea>\r\n      </StyledCard>\r\n    </Grid>\r\n  )\r\n}\r\n","import React, { useState, useEffect, ChangeEvent } from 'react'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport { TextField, InputAdornment, Typography, Grid } from '@material-ui/core'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport { Business } from '../../Stores/BusinessStore'\r\nimport { rootStore } from '../../Stores/Stores'\r\nimport { observer } from 'mobx-react-lite'\r\nimport styled from 'styled-components'\r\nimport { GridItem } from './GridItem'\r\nconst useQuery = () => new URLSearchParams(useLocation().search)\r\n\r\nconst StyledGrid = styled(Grid)`\r\n  flex-grow: 1;\r\n  margin-top: 10px;\r\n  justify-content: space-evenly;\r\n`\r\n\r\nexport const SearchPage = observer(() => {\r\n  const [businesses, setBusinesses] = useState<Business[]>([])\r\n  const query = useQuery().get('query')\r\n  const [inputValue, setInputValue] = useState<string>(query || '')\r\n  const [error, setError] = useState<boolean>(false)\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    ;(async () => {\r\n      setBusinesses(await rootStore.businessStore.searchBusinesses(query!))\r\n    })()\r\n  }, [query])\r\n\r\n  const onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setError(!isInputValid(e.currentTarget.value))\r\n    setInputValue(e.currentTarget.value)\r\n  }\r\n\r\n  const isInputValid = (val: string) => {\r\n    return /^[a-z0-9\\s]+$/i.test(val)\r\n  }\r\n\r\n  const search = () => {\r\n    if (inputValue && !error) history.push(`/?query=${inputValue}`)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <TextField\r\n        style={{ width: '100%', marginTop: 10 }}\r\n        label='search'\r\n        onBlur={search}\r\n        onChange={onChange}\r\n        onKeyPress={e => {\r\n          if (e.key === 'Enter') {\r\n            search()\r\n          }\r\n        }}\r\n        value={inputValue}\r\n        InputProps={{\r\n          endAdornment: (\r\n            <InputAdornment position='end'>\r\n              <SearchIcon />\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n        error={error}\r\n        helperText={error ? 'Incorrect entry.' : ''}\r\n      />\r\n      <StyledGrid container>\r\n        {businesses.map((b: Business) => (\r\n          <GridItem {...b} />\r\n        ))}\r\n        {businesses.length === 0 && !rootStore.isLoading && (\r\n          <Typography variant='h5'>{!query ? 'Type to search for business' : 'No results found'}</Typography>\r\n        )}\r\n      </StyledGrid>\r\n    </>\r\n  )\r\n})\r\n","import { List, ListItem, ListItemText } from '@material-ui/core'\r\nimport Rating from '@material-ui/lab/Rating'\r\nimport React from 'react'\r\nimport { BusinessDetails } from '../../Stores/BusinessStore'\r\n\r\nexport const Details = (business: BusinessDetails) => (\r\n  <List dense disablePadding>\r\n    <ListItem>\r\n      <ListItemText primary='rating' secondary={<Rating defaultValue={business?.rating} readOnly precision={0.5} size='medium'></Rating>} />\r\n    </ListItem>\r\n    {business?.price && (\r\n      <ListItem>\r\n        <ListItemText primary='price' secondary={business?.price} />\r\n      </ListItem>\r\n    )}\r\n    {business?.display_phone && (\r\n      <ListItem>\r\n        <ListItemText primary='phone' secondary={business?.display_phone} />\r\n      </ListItem>\r\n    )}\r\n    <ListItem>\r\n      <ListItemText primary='address' secondary={business?.location.display_address.join(', ')} />\r\n    </ListItem>\r\n    <ListItem>\r\n      <ListItemText\r\n        primary='categories'\r\n        secondary={business?.categories\r\n          .map(c => {\r\n            return c.title\r\n          })\r\n          .join(', ')}\r\n      />\r\n    </ListItem>\r\n  </List>\r\n)\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useRouteMatch } from 'react-router-dom'\r\nimport { Review } from '../../Stores/ReviewsStore'\r\nimport { rootStore } from '../../Stores/Stores'\r\nimport { observer } from 'mobx-react-lite'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport { Typography, Card, CardHeader, CardContent, Grid } from '@material-ui/core'\r\nimport styled from 'styled-components'\r\n\r\nconst StyledGrid = styled(Grid)`\r\n  flex-grow: 1;\r\n  margin-top: 10px;\r\n`\r\nexport const Reviews = observer(() => {\r\n  const id = useRouteMatch<{ id: string }>('/business/:id')?.params.id!\r\n  const { reviewsStore } = rootStore\r\n\r\n  useEffect(() => {\r\n    ;(async () => {\r\n      setReviews(await reviewsStore.getReviews(id))\r\n    })()\r\n  }, [id, reviewsStore])\r\n\r\n  const [reviews, setReviews] = useState<Review[]>([])\r\n\r\n  return (\r\n    <StyledGrid container spacing={2}>\r\n      {reviews.map(r => {\r\n        return (\r\n          <Grid item key={r.id}>\r\n            <Card style={{ maxWidth: 345 }}>\r\n              <CardHeader avatar={<Avatar src={r.user.image_url} alt={r.user.name} />} title={r.user.name} subheader={r.time_created} />\r\n              <CardContent>\r\n                <Typography variant='body2' color='textSecondary' component='p'>\r\n                  {r.text}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        )\r\n      })}\r\n    </StyledGrid>\r\n  )\r\n})\r\n","import React from 'react'\r\nimport { Grid } from '@material-ui/core'\r\nimport { BusinessDetails } from '../../Stores/BusinessStore'\r\nimport styled from 'styled-components'\r\n\r\nconst StyledImage = styled.img`\r\n  max-height: 300px;\r\n  max-width: 90vw;\r\n`\r\n\r\nexport const Gallery = (business: BusinessDetails) => (\r\n  <Grid container spacing={2}>\r\n    {business.photos?.map(p => {\r\n      return (\r\n        <Grid item key={p}>\r\n          <StyledImage alt={business.name} src={p} />\r\n        </Grid>\r\n      )\r\n    })}\r\n  </Grid>\r\n)\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useRouteMatch } from 'react-router-dom'\r\nimport { Typography } from '@material-ui/core'\r\nimport { Details } from './Details'\r\nimport { Reviews } from './Reviews'\r\nimport { Gallery } from './Gallery'\r\nimport { BusinessDetails } from '../../Stores/BusinessStore'\r\nimport { rootStore } from '../../Stores/Stores'\r\n\r\nexport const DetailsPage = () => {\r\n  const id = useRouteMatch<{ id: string }>('/business/:id')?.params.id\r\n  const [business, setBusiness] = useState<BusinessDetails>()\r\n  const { businessStore } = rootStore\r\n\r\n  useEffect(() => {\r\n    ;(async () => {\r\n      setBusiness(await businessStore.getBusinessDetails(id!))\r\n    })()\r\n  }, [businessStore, id])\r\n\r\n  return business ? (\r\n    <>\r\n      <Typography variant='h4' style={{ marginTop: 10 }} align='left' gutterBottom>\r\n        {business.name}\r\n      </Typography>\r\n      <Gallery {...business} />\r\n      <Details {...business} />\r\n      <Reviews />\r\n    </>\r\n  ) : rootStore.isLoading ? (\r\n    <></>\r\n  ) : (\r\n    <Typography variant='h4' style={{ marginTop: 10 }}>\r\n      Not found\r\n    </Typography>\r\n  )\r\n}\r\n","import React from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\n\nimport { SearchPage } from '../Search/SearchPage'\nimport { Switch, Route } from 'react-router-dom'\nimport { DetailsPage } from '../Details/DetailsPage'\nimport { Container, Backdrop, CircularProgress, Snackbar } from '@material-ui/core'\nimport { rootStore } from '../../Stores/Stores'\nimport { observer } from 'mobx-react-lite'\nimport Alert from '@material-ui/lab/Alert'\nimport styled from 'styled-components'\n\nconst StyledToolbar = styled(Toolbar)`\n  background: #d32323 url(https://s3-media4.fl.yelpcdn.com/assets/srv0/yelp_styleguide/c146b0884f6a/assets/img/structural/header_stars.png)\n    no-repeat center;\n`\n\nconst StyledLogo = styled.div`\n  background-image: url(https://s3-media1.fl.yelpcdn.com/assets/srv0/yelp_design_web/48792dd29811/assets/img/logos_desktop/default.png);\n  background-size: 80px 40px;\n  width: 80px;\n  height: 50px;\n  background-repeat: no-repeat;\n  margin-top: 8px;\n`\n\nexport const App = observer(() => {\n  return (\n    <div className='App'>\n      <AppBar position='static'>\n        <StyledToolbar>\n          <StyledLogo />\n        </StyledToolbar>\n      </AppBar>\n      <Container maxWidth='xl'>\n        <Switch>\n          <Route path='/' exact>\n            <SearchPage />\n          </Route>\n          <Route path='/business/:id?'>\n            <DetailsPage />\n          </Route>\n        </Switch>\n        <Backdrop open={rootStore.isLoading} style={{ zIndex: 1 }}>\n          <CircularProgress style={{ color: '#d32323' }} />\n        </Backdrop>\n      </Container>\n      <Snackbar open={rootStore.isError} autoHideDuration={6000} onClose={rootStore.clearError}>\n        <Alert onClose={rootStore.clearError} severity='error'>\n          {rootStore.errorMessage}\n        </Alert>\n      </Snackbar>\n    </div>\n  )\n})\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA')\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log('New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.')\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './Components/App/App'\nimport * as serviceWorker from './serviceWorker'\nimport { HashRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <HashRouter basename='/'>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}